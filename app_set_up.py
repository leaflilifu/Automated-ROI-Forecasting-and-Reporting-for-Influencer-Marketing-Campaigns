# -*- coding: utf-8 -*-
"""app set up

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1scXosuQ5YbxM3weYr_0KokMXDYoCbVQu
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# from datetime import date
# import pickle
# import matplotlib.pyplot as plt
# import seaborn as sns
# 
# def plot_metric_all_dimensions(df, influencer_category, platform, campaign_type, user_value, metric_name):
#     dims = {
#         "Influencer Category": ("influencer_category", influencer_category),
#         "Platform": ("platform", platform),
#         "Campaign Type": ("campaign_type", campaign_type)
#     }
# 
#     data = []
#     for label, (col_name, selected_val) in dims.items():
#         benchmark = df[df[col_name] == selected_val][metric_name].mean()
#         data.append({
#             "Dimension": label,
#             "Type": "Benchmark",
#             metric_name: benchmark
#         })
#         data.append({
#             "Dimension": label,
#             "Type": "Your Input",
#             metric_name: user_value
#         })
# 
#     plot_df = pd.DataFrame(data)
# 
#     plt.figure(figsize=(7, 5))
#     sns.barplot(data=plot_df, x="Dimension", y=metric_name, hue="Type", palette=["gray", "red"])
#     plt.title(f"{metric_name.replace('_', ' ').title()}: Your Input vs Benchmark")
#     plt.ylabel(metric_name.replace('_', ' ').title())
#     max_y = plot_df[metric_name].max()
#     plt.ylim(0, max_y * 1.2 if max_y > 0 else 1.5)
#     plt.tight_layout()
#     st.pyplot(plt.gcf())
# 
# with open("roi_model.pkl", "rb") as f:
#     model = pickle.load(f)
# 
# url = "https://drive.google.com/uc?id=1Nz4btx7U9U3dhYh9plEi1s9DL_0ms5xt"
# df = pd.read_csv(url)
# 
# def predict_proba(input_df):
#     return model.predict_proba(input_df)[:, 1][0]
# 
# def predict_class(input_df):
#     return model.predict(input_df)[0]
# 
# st.set_page_config(page_title="Campaign ROI Report Generator", layout="centered")
# st.title("üìà Campaign ROI Report Generator")
# st.markdown("Select mode and enter campaign details to generate a predictive or post-launch performance report.")
# 
# # User Choice of Mode
# mode = st.radio("Select Report Mode", ["Pre-Campaign Prediction", "Post-Campaign Evaluation"])
# 
# # User Input
# st.header("üìã Campaign Configuration")
# platform = st.selectbox("Platform", ['Instagram', 'TikTok', 'YouTube', 'Twitter'])
# category = st.selectbox("Influencer Category", ['Food', 'Travel', 'Beauty', 'Tech', 'Fashion', 'Fitness', 'Gaming'])
# campaign_type = st.selectbox("Campaign Type", ['Product Launch', 'Seasonal Sale', 'Event Promotion', 'Giveaway', 'Brand Awareness'])
# estimated_reach = st.number_input("Estimated Reach", min_value=1000, step=1000, value=50000)
# estimated_cost = st.number_input("Estimated Cost (USD)", min_value=100.0, step=100.0, value=1000.0)
# duration = st.slider("Campaign Duration (days)", min_value=1, max_value=60, value=14)
# 
# # Input DataFrame
# input_base = {
#     'platform': platform,
#     'influencer_category': category,
#     'campaign_type': campaign_type,
#     'estimated_reach': estimated_reach,
#     'estimated_cost': estimated_cost,
#     'campaign_duration_days': duration
# }
# 
# # Mode 1: Pre-Campaign Prediction
# if mode == "Pre-Campaign Prediction":
#     st.subheader("üéØ Predicted ROI Evaluation")
#     input_df = pd.DataFrame([input_base])
# 
#     roi_proba = predict_proba(input_df)
#     predicted_class = predict_class(input_df)
#     predicted_label = "üü¢ High ROI" if predicted_class == 1 else "üî¥ Low ROI"
# 
#     st.markdown(f"**Prediction:** {predicted_label}")
#     st.markdown(f"**Confidence:** {roi_proba:.1%}")
# 
#     st.subheader("üß† Suggested Action")
#     if predicted_class == 1:
#         st.success("This campaign configuration is likely to yield strong ROI.")
#     else:
#         st.warning("This configuration may underperform. Consider adjusting platform or campaign type.")
# 
#     report_text = f"""\
# Campaign Prediction Report
# 
# Platform: {platform}
# Category: {category}
# Type: {campaign_type}
# Estimated Reach: {estimated_reach}
# Estimated Cost: ${estimated_cost:,.2f}
# Duration: {duration} days
# 
# Predicted ROI: {predicted_label}
# Confidence Score: {roi_proba:.1%}
# """
# 
# # Mode 2: Post-Campaign Evaluation
# else:
#     st.header("üìà Actual Performance Inputs")
#     actual_sales = st.number_input("Actual Product Sales", min_value=0, value=0)
#     actual_engagements = st.number_input("Actual Engagements", min_value=0, value=0)
#     start_date = st.date_input("Campaign Start Date", value=date(2025, 1, 1))
#     end_date = st.date_input("Campaign End Date", value=date(2025, 1, 15))
# 
#     actual_duration = (end_date - start_date).days if (end_date - start_date).days > 0 else 1
#     actual_roi = actual_sales / estimated_cost if estimated_cost > 0 else 0
#     engagement_rate = actual_engagements / estimated_reach if estimated_reach > 0 else 0
#     conversion_rate = actual_sales / estimated_reach if estimated_reach > 0 else 0
# 
#     st.subheader("üìä Calculated Metrics")
#     st.markdown(f"- **Actual ROI:** {actual_roi:.2f}")
#     st.markdown(f"- **Engagement Rate:** {engagement_rate:.2%}")
#     st.markdown(f"- **Conversion Rate:** {conversion_rate:.2%}")
#     st.markdown(f"- **Actual Duration:** {actual_duration} days")
# 
#     report_text = f"""\
# Campaign Performance Report
# 
# Platform: {platform}
# Category: {category}
# Type: {campaign_type}
# Duration: {actual_duration} days
# Estimated Cost: ${estimated_cost:,.2f}
# 
# Product Sales: {actual_sales}
# ROI: {actual_sales} / {estimated_cost} = {actual_roi:.2f}
# Engagements: {actual_engagements}
# Engagement Rate: {engagement_rate:.2%}
# Conversion Rate: {conversion_rate:.2%}
# 
# Insights:
# {"Strong ROI ‚úÖ" if actual_roi >= 1 else "Low ROI ‚ùå - optimize content or influencer mix"}
# """
# 
#     st.subheader("ROI vs Benchmark")
#     plot_metric_all_dimensions(
#         df=df,
#         influencer_category=category,
#         platform=platform,
#         campaign_type=campaign_type,
#         user_value=actual_roi,
#         metric_name="ROI"
#     )
# 
#     st.subheader("Conversion Rate vs Benchmark")
#     plot_metric_all_dimensions(
#         df=df,
#         influencer_category=category,
#         platform=platform,
#         campaign_type=campaign_type,
#         user_value=conversion_rate,
#         metric_name="Conversion_rate"
#     )
# 
#     st.subheader("Engagement Rate vs Benchmark")
#     plot_metric_all_dimensions(
#         df=df,
#         influencer_category=category,
#         platform=platform,
#         campaign_type=campaign_type,
#         user_value=engagement_rate,
#         metric_name="Engagement_rate"
#     )
# 
# # Report Download
# st.subheader("üì• Downloadable Report")
# st.download_button(
#     label="Download Report as TXT",
#     data=report_text,
#     file_name="campaign_report.txt",
#     mime="text/plain"
# )
# 
# with st.expander("üîç View Full Text Report"):
#     st.code(report_text)
#